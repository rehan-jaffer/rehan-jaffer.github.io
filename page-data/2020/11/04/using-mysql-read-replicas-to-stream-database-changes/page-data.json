{"componentChunkName":"component---src-templates-post-js","path":"/2020/11/04/using-mysql-read-replicas-to-stream-database-changes/","result":{"data":{"wpPost":{"title":"Using MySQL read replicas to stream database changes","content":"\r\n<h2><strong>Introduction</strong></h2>\r\n<h2><strong>\r\n\r\n</strong></h2>\r\n<h2><strong>What you’ll need</strong></h2>\r\n\r\n\r\n\r\n<p>For this tutorial we’re going to use a local install of wordpress to stream events from. There are any number of tutorials about getting wordpress and the LAMP stack working so I won’t go into it here. You’ll also need Python installed and the mysql-replication pip package along with it. During a lot of exploratory work this was the library that functioned best for this particular function</p>\r\n\r\n\r\n\r\n<h2><strong>Setting up MySQL</strong></h2>\r\n\r\n\r\n\r\n<p>You’ll need to enable binary logging for your MySQL install, as of MySQL 5.7 this is enabled by default. You’ll also need to set the binary logging option to ROW format. Next, you’ll need a user with read access to your wordpress database with REPLICATION CLIENT and REPLICATION SLAVE privileges.</p>\r\n\r\n\r\n\r\n<code>CREATE USER repl IDENTIFIED BY 'slavepass';<br />GRANT REPLICATION CLIENT, REPLICATION SLAVE ON *.* TO repl;</code>\r\n\r\n\r\n\r\n<h2><strong>The Python Code</strong></h2>\r\n\r\n\r\n\r\n<p>The following code is from an AWS article that inspired this one, and should work without any modification.</p>\r\n\r\n\r\n\r\n<p>Run the script and go to your wordpress dashboard, try clicking around and creating a post. You should start seeing events being listed in the console like the following screenshot.</p>\r\n\r\n\r\n\r\n<h2><strong>Filtering the Events</strong></h2>\r\n\r\n\r\n\r\n<p>Just as a quick example let’s do something useful. Let’s imagine we have a wordpress install with a lot of users we want to keep an eye on. We’re going to filter events and just show users logging into wordpress. Here’s a quick python script that does just that.</p>\r\n\r\n\r\n\r\n<h2><strong>Conclusion</strong></h2>\r\n\r\n\r\n\r\n<p>This particular example isn’t going to be useful for anything immediately but if you think it over there’s a lot of cool stuff you can do with this mechanism. Being able to stream database events means being able to write scripts or other software that responds to those events and coordinates other actions. <br /><br />We’re using this in production in a community library I help run where the library management software is written in Perl and not easy to modify. We have a couple of scripts and a Rails app that need to respond to actions by people visiting the library and new members signing up. Here’s a screenshot of some code I wrote to view check-in/check-outs at a glance.</p>\r\n\r\n\r\n\r\n<p> </p>\r\n"}},"pageContext":{"id":"cG9zdDoyOQ=="}},"staticQueryHashes":["3649515864"]}